name: Create Release and Publish Package

on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    if: |
      contains(github.event.pull_request.labels.*.name, 'release-type/patch')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adopt-openjdk'

      - name: Build with Maven
        env:
          MAVEN_GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: mvn clean package --settings .github/maven-settings.xml

      - name: Publish to GitHub Packages
        env:
          MAVEN_GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: mvn deploy --settings .github/maven-settings.xml

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{"tag_name": "${GITHUB_REF#refs/tags/}", "name": "${GITHUB_REF#refs/tags/}", "body": "Release for version ${GITHUB_REF#refs/tags/}"}' \
          https://api.github.com/repos/${{ github.repository }}/releases
      - name: Calculate next version and update pom.xml
        run: |
          # Get the current version
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          
          # Extract the major, minor, and patch components
          IFS='.' read -r major minor patch <<<"${CURRENT_VERSION//v/}"
          
          # Increment the patch version
          patch=$((patch + 1))
          
          # Construct the next version string
          NEXT_VERSION="v${major}.${minor}.${patch}"
          
          # Update the version in pom.xml
          mvn versions:set -DnewVersion=$NEXT_VERSION
          mvn versions:commit
          
          # Commit and push the changes
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git commit -am "Prepare for next version $NEXT_VERSION"
          git tag "$NEXT_VERSION"
          git push origin main --tags